y <- (b-a) * g
return(mean(y))
}
int <- function(a,b,s,n) {
set.seed(s)
x <- runif(n, a, b)
g <- sin(cos(x))
y <- (b-a) * g
return(mean(y))
}
int(0,2,1,100)
int(0,2,1,100)
int(0,2,2,100)
int(0,2,3,100)
int(0,2,4,100)
int(0,2,5,100)
for (i in 1:5) {int(0,2,i,100)}
for (i in 1:5) {print(int(0,2,i,100))}
for (i in 1:4) {print(int(0,2,1,10^i))}
int(0,2,1,100)
int(0,2,1,10000)
int(0,2,1,100000)
int(0,2,1,1000000)
int(0,2,1,10000000)
int(0,2,1,10000000)
int(0,2,1,100)
sum <- function(x,n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*n + 3)
}
}
sum <- function(x,n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*n + 3)
}
}
sum(1.047198,20)
sum <- function(x,n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*n + 3)
}
return(sum)
}
sum(1.047198,20)
sum(1,1)
sum <- function(x,n) {
sum <- 0
for (i in 1:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*n + 3)
}
return(sum)
}
sum(1,1)
sum(1.047198,20)
1/6
sum(1.047198,20)
sum <- function(x,n) {
sum <- 0
for (i in 1:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*i + 3)
}
return(sum)
}
sum(1.047198,20)
sum <- function(x,n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^i)*(x^(2*i + 3)) / factorial(2*i + 3)
}
return(sum)
}
sum(1.047198,20)
sum2 <- function(n) {
sum <- 0
for (i in 1:n) {
sum <- sum + ((-1)^i) * (5 + 7*i) / (7^i)
}
return(sum)
}
sum2(`0`)
sum2(10)
sum2 <- function(n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^i) * (5 + 7*i) / (7^i)
}
return(sum)
}
sum2(10)
sum2 <- function(n) {
sum <- 0
for (i in 0:n) {
sum <- sum + ((-1)^(i-1)) * (5 + 7*i) / (7^i)
}
return(sum)
}
sum2(10)
Test2Q3 <- function(n) {
if (n == 0) {
return (-4)
} else {
return ((((-1)^(n-1)) * (5 + 7*n) / (7^n)) + Test2Q3(n-1))
}
}
Test2Q3(10)
Test2Q3 <- function(n) {
if (n == 0) {
return (-5)
} else {
return ((((-1)^(n-1)) * (5 + 7*n) / (7^n)) + Test2Q3(n-1))
}
}
Test2Q3(10)
pi
int <- Test2Q4 <- function(s,n,a,b) {
set.seed(s)
x <- runif(n, a, b)
g <- ((4 * sqrt(2*pi))^(-1))*exp((-1/32)*(x-6)^2)
y <- (b-a) * g
return(mean(y))
}
int(1,10000000, 8, 12)
int(1,10000000, 6,14)
bonus <- function(n, p1, p2, p3) {
if (n == 1) {
cat(sprintf("move top disk from %d to %d\n", p1,p2))
} else {
bonus(n-1,p1,p3,p2)
cat(sprintf("move top disk from %d to %d\n", p1,p2))
bonus(n-1,p3,p2,p1)
}
}
bonus(10,1,2,3)
bonus(2,1,2,3)
bonus(3,1,2,3)
bonus <- function(n, p1, p2, p3) {
if (n > 1) bonus(n-1, p1,p3,p2)
cat(sprintf("move top disk from %d to %d\n", p1,p2))
if (n > 1) bonus(n-1,p3,p2,p1)
}
bonus(2,a,b,c)
bonus(2,'a','b','c')
bonus <- function(n, p1, p2, p3) {
if (n > 1) bonus(n-1, p1,p3,p2)
cat(sprintf("move top disk from %s to %s\n", p1,p2))
if (n > 1) bonus(n-1,p3,p2,p1)
}
bonus(2,'a','b','c')
count <- 0
bonus <- function(n, p1, p2, p3) {
if (n > 1)
bonus(n-1, p1,p3,p2)
count <- count + 1
print(count)
if (n > 1)
bonus(n-1,p3,p2,p1)
}
bonus(3,'a','b','c')
toh <- function(n) {
count <- 0
if (n > 0) {
count <- toh(n-1)
count <- count + 1
count <- count + toh(n-1)
}
return (count)
}
rm(count)
toh(3)
toh(4)
toh(5)
toh(10)
toh(20)
toh <- function(n) {
count <- 0
if (n > 0)
count <- toh(n-1) + toh(n-1) + 1
return(count)
}
toh(4)
toh(3)
toh(2)
toh(10)
toh <- function(n) {
count <- 0
if (n > 0)
count <- 2 * toh(n-1) + 1
return(count)
}
toh(10)
debugSource('C:/Users/John/code/math-comp/MccraryJ_Test2.R')
n
toh(3)
toh(5)
#Example 5
library(BSDA)
#Example 6
library(UsingR)
#Example 9
x<-babies$age
y<-babies$dage
length(x)
#Example 6
library(UsingR)
library("UsingR", lib.loc="~/R/win-library/3.3")
#Example 9
x<-babies$age
x<-babies$age
source('C:/Users/John/AppData/Local/Temp/Chapter 9.R')
#Example 11
library(UsingR)
attach(normtemp)
#Example 12
x<-c(80,90,81,99,100,75,88,89,77,87,91,67)
y<-c(75,65,99,92,76,69,55,59)
t.test (x, y, var.equal=FALSE, alternative = "less")
source('C:/Users/John/code/math-comp/project/project.R')
library(deSolve)
model <- function (t, y, parms) {
with(as.list(c(y, parms)), {
dy1 <- -2 * y[2] * y[3]
dy2 <- 1.25 * y[1] * y[3]
dy3 <- -0.5 * y[1] * y[2]
list(c(dy1, dy2, dy3))
})
}
y <- c(N = 0.1)
parms <- c(r = 0.1, K = 10)
times <- 0:100
out <- ode(y, times, model, parms)
source('C:/Users/John/code/math-comp/project/project.R')
plot(out)
plot(out[,"X"],out[,"Z"],pch=".")
source('C:/Users/John/code/math-comp/project/project.R')
source('C:/Users/John/code/math-comp/project/project.R')
source('C:/Users/John/code/math-comp/project/project.R')
times <- seq(0, 1000, by = 0.01)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
library(deSolve)
parameters <- c(a = -10, b = -9/3, c = 28)
state <- c(X = 1, Y = 1, Z = 1)
Lorenz <- function (t, state, parameters) {
with(as.list(c(state,parameters)), {
#rates of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X * Y + c * Y - Z
list(c(dX,dY,dZ))
})
}
times <- seq(0, 1000, by = 0.01)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
source('C:/Users/John/code/math-comp/project/project.R')
times <- seq(0, 100, by = 0.01)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
parameters <- c(a = -7/3, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
parameters <- c(a = -1/3, b = -10, c = 28)
times <- seq(0, 100, by = 0.01)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
parameters <- c(a = -2/3, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
par(oma = c(0,0,3,0))
plot(out, xlab="time", ylab = "-")
plot(out[,"X"],out[,"Z"],pch=".")
mtext(outer = T, side = 3, "Lorenz model", cex = 1.5)
parameters <- c(a = -2/3, b = -10, c = 28)
parameters <- c(a = -3/3, b = -10, c = 28)
plot(out[,"X"],out[,"Z"],pch=".")
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out[,"X"],out[,"Z"],pch=".")
plot(out[,"X"],out[,"Z"],pch=".")
plot(out[,"X"],out[,"Z"],pch=".")
parameters <- c(a = -1, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
for (i in sample(1,4)) {
parameters <- c(a = -i, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out[,"X"],out[,"Z"],pch=".")
}
for (i in sample(1,4, replace = T)) {
parameters <- c(a = -i, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out[,"X"],out[,"Z"],pch=".")
}
sample(1,5)
sample(1,5, replace = T)
sample(1,6, replace = T)
sample(6, replace = T)
sample(4, replace = T)
sample(5, replace = T)
for (i in sample(4, replace = T)) {
parameters <- c(a = -i, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out[,"X"],out[,"Z"],pch=".")
}
for (i in sample(4, replace = T)) {
parameters <- c(a = -1/i, b = -10, c = 28)
out <- ode(y = state, times=times, func=Lorenz, parms=parameters)
plot(out[,"X"],out[,"Z"],pch=".")
}
rm(list=ls())
g <- 9.8
r1 <- 5
m1 <- 10
r2 <- 5
m2 <- 10
t1 <- 3 * pi / 5
t2 <- pi / 8
# initial position of masses (x1,y1) and (x2,y2)
x1 <- r1 * sin(t1)
y1 <- -r1 * cos(t1)
x2 <- x1 + r2 * sin(t2)
y2 <- y1 * r2 * cos(t2)
x1
x2
y1
y2
t1v <- dt1  <- 0 # angular velocity 1
t1a <- ddt1 <- 0 # angular accel 1
t2v <- dt2  <- 0 # angular velocity 2
t2a <- ddt2 <- 0 # angular accel 2
timestep <- seq(0,100,by=0.1)
num1a <- -g * (2 * m1 + m2) * sin(t1) - m2 * g * sin(t1 - 2 * t2)
num1b <- -2 * sin(t1 - t2) * m2 * ((dt2 ^ 2) * r2 + (dt1^2) * r1 * cos(t1 - t2))
den1  <- r1 * (2 * m1 + m2 - m2 * cos(2 * t1 - 2 * t2))
num2a <- 2 * sin(t1 - t2) * ((dt1^2) * r1 * (m1 + m2) + g*(m1 + m2)*cos(t1))
num2b <- (dt2^2) * r2 * m2 * cos(t1 - t2)
den2  <- r2 * (2 * m1 + m2 - m2 * cos(2 * t1 - 2 * t2))
ddt1 <- (num1a + num1b) / den1
ddt2 <- (num2a + num2b) / den2
dt1  <- dt1 + ddt1
dt2  <- dt2 + ddt2
t1   <- t1 + dt1
t2   <- t2 + dt2
t1
t2
dt1
dt2
timestep <- seq(0,10,by=0.1)
X1 <- X2 <- Y1 <- Y2 <- numeric(length(timestep))
X1
length(X1)
timestep <- seq(0,50,by=0.1)
X1 <- X2 <- Y1 <- Y2 <- numeric(length(timestep))
# |          /|      |
# |         / |      |
# |        /__|      |
# |       O   v      |
# |__________________|
#
# g = gravitational constant
# r1, r2 = length of rods 1 & 2
# m1, m2 = masses at the ends of rods 1 & 2
# t1, t2 = angle of rods 1 and 2
rm(list=ls())
source('C:/Users/John/code/math-comp/project/double_pendulum.R')
warnings()
debugSource('C:/Users/John/code/math-comp/project/double_pendulum.R')
timestep <- seq(0,10,by=0.01)
X1 <- X2 <- Y1 <- Y2 <- numeric(length(timestep))
for (step in timestep) {
# truly ugly formulas for this system, don't read too far into these
# this chunk is going to combine to form ddt1
num1a <- -g * (2 * m1 + m2) * sin(t1) - m2 * g * sin(t1 - 2 * t2)
num1b <- -2 * sin(t1 - t2) * m2 * ((dt2 ^ 2) * r2 + (dt1^2) * r1 * cos(t1 - t2))
den1  <- r1 * (2 * m1 + m2 - m2 * cos(2 * t1 - 2 * t2))
# this chunk is going to combine to form ddt2
num2a <- 2 * sin(t1 - t2) * ((dt1^2) * r1 * (m1 + m2) + g*(m1 + m2)*cos(t1))
num2b <- (dt2^2) * r2 * m2 * cos(t1 - t2)
den2  <- r2 * (2 * m1 + m2 - m2 * cos(2 * t1 - 2 * t2))
# update the accel
ddt1 <- (num1a + num1b) / den1
ddt2 <- (num2a + num2b) / den2
# update the velocity based on the accel
dt1  <- dt1 + ddt1
dt2  <- dt2 + ddt2
#update the position based on the velocity
t1   <- t1 + dt1
t2   <- t2 + dt2
# update coordinates based on the angles
x1 <- r1 * sin(t1)
y1 <- -r1 * cos(t1)
x2 <- x1 + r2 * sin(t2)
y2 <- y1 * r2 * cos(t2)
# insert updated x1, y1, etc into the vector
X1[step] <- x1
Y1[step] <- y1
X2[step] <- x2
Y2[step] <- y2
}
g <- 5
r1 <- 5
m1 <- 10
r2 <- 5
m2 <- 10
t1 <- 3 * pi / 5
t2 <- pi / 8
rm(list=ls())
debugSource('C:/Users/John/code/math-comp/project/double_pendulum.R')
q
quit
exit
source('C:/Users/John/code/math-comp/project/double_pendulum.R')
timestep <- seq(0,100,by=0.01)
rm(list=ls())
source('C:/Users/John/code/math-comp/project/double_pendulum.R')
pi
pi / 2
pi / 2
sin(pi / 3)
sin(pi / 2)
sin(30)
sin(45)
sqrt(2)
1/sqrt(2)
sin(pi/4)
# |          /|      |
# |         / |      |
# |        /__|      |
# |       O   v      |
# |__________________|
#
# g = gravitational constant
# r1, r2 = length of rods 1 & 2
# m1, m2 = masses at the ends of rods 1 & 2
# t1, t2 = angle of rods 1 and 2
rm(list=ls())
g <- 5
r1 <- r2 <- 5  # rods are equal length
m1 <- m2 <- 10 # equal masses too
t1 <- pi / 2 # initial theta_1
t2 <- pi / 2 # initial theta_2
dt1  <- 0 # angular velocity of theta_1
dt2  <- 0 # angular velocity of theta_2
# initial position of masses (x1,y1) and (x2,y2)
x1 <- r1 * sin(t1)
y1 <- -r1 * cos(t1)
x2 <- x1 + r2 * sin(t2)
y2 <- y1 * r2 * cos(t2)
timestep <- seq(0,100,by=0.01)
# truly ugly formulas for this system, don't read too far into these
# this chunk is going to combine to form ddt1
n1 <- -g * (2 * m1 + m2) * sin(t1)
n2 <- -m2 * g * sin(t1 - 2*t2)
n3 <- -2 * sin(t1 - t2) * m2
n4 <- dt2 * dt2 * r2 * dt1 * dt1 * r1 * cos(t1 - t2)
d  <- r1 * (2 * m1 + m2 - m2 * cos(2 * t1 - 2 * t2))
ddt1 <- (n1 + n2 + n3 * n4) / d
# this chunk is going to combine to form ddt2
n1 <- 2 * sin(t1 - t2)
n2 <- (dt1 * dt1 * r1 * (m1 + m2))
n3 <- g * (m1 + m2) * cos(t1)
n4 <- dt2 * dt2 * r2 * m2 * cos(t1 - t2)
ddt2 <- (n1 * (n2 + n3 + n4)) / d
# update the velocity based on the accel
dt1 <- dt1 + ddt1
dt2 <- dt2 + ddt2
#update the position based on the velocity
t1 <- t1 + dt1
t2 <- t2 + dt2
# update coordinates based on the angles
x1 <- r1 * sin(t1)
y1 <- -r1 * cos(t1)
x2 <- x1 + r2 * sin(t2)
y2 <- y1 * r2 * cos(t2)
X1 <- X2 <- Y1 <- Y2 <- numeric(length(timestep))
# insert updated x1, y1, etc into the vector
X1[step] <- x1
Y1[step] <- y1
source('C:/Users/John/code/math-comp/project/double_pendulum.R')
100/0.001
100/0.01
source('C:/Users/John/code/math-comp/project/double_pendulum.R')
library(shiny)
install.packages("shiny")
library(shiny)
pwd
pwd()
setwd("C:/Users/John/code/math-comp/project/shinyproj")
setwd("C:/Users/John/code/math-comp/project")
library(shiny)
runApp("shinyproj")
runExample("03_reactivity")
runApp("shinyproj")
runExample("03_reactivity")
