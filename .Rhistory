cat(sprintf("%d + %d = %d \n", i, j, var))
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/code/nested_loops.R', echo=TRUE)
q
quit
rm(list=ls())
m<-5
n<-4
source('~/code/nested_loops.R', echo=TRUE)
source('~/code/primes.R', echo=TRUE)
character(5)
character(50)
character(500)
source('~/code/nested_loops.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/code/multiplication_table.R')
cat(sprintf("%3f\n", 4))
cat(sprintf("%3.f\n", 4))
cat(sprintf("%3.0f\n", 4))
source('~/code/multiplication_table.R')
source('~/code/functions/square.R')
square(4)
square(square(5))
source('~/code/functions/square.R')
square(3)
source('~/code/functions/square.R')
square(3)
source('~/code/functions/square.R')
square(3)
source('~/code/functions/square2.R')
square2(3,4)
source('~/code/functions/square2.R')
fib(1)
fib(3)
source('~/code/functions/square2.R')
factorial(3)
rm(list=ls())
source('~/code/functions/square2.R')
fact(3)
fact(4)
fact(5)
fact(100)
x <- numeric(4)
x
numeric(3)
source('~/code/functions/natural.R')
natural(4)
print(natural(4))
natural(natural(4))
natural(natural(1))
source('~/Desktop/factorial.R')
nfact2(4)
nfact2(5)
source('~/Desktop/factorial.R', echo=TRUE)
fact(5)
source('~/Desktop/factorial.R', echo=TRUE)
fact(5)
debugSource('~/Desktop/factorial.R', echo=TRUE)
n
View(nfact2)
rm(nfact2)
x <- numeric(10)
for (i in 1:10) {x[i] <- fact(i)}
plot(x)
source('~/Desktop/factorial.R', echo=TRUE)
sum.n2(4)
4 + 3 + 2 + 1
source('~/Desktop/factorial.R', echo=TRUE)
4 + 3 + 2 + 1
sum.n2(4)
source('~/Desktop/factorial.R', echo=TRUE)
sum.n2(4)
sum.n2(100)
sum.n2(-6)
sum.n2(-2)
source('~/Desktop/factorial.R', echo=TRUE)
sum.square2(4)
source('~/Desktop/factorial.R', echo=TRUE)
my.exp(1, 10)
my.exp(1, 100)
my.exp(1, 1000)
my.exp(1, 10000)
install.packages("shiny")
?plotOutput
?shiny
??plotOutput
library(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(actionButton("newplot", "New plot")),
mainPanel(plotOutput("plot"))
)
),
server = function(input,output) {
output$plot <- renderPlot({
input$newplot
cars2 <- cars + rnorm(nrow(cars))
plot(cars2)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
plotOutput("plot", height=300,
click = "plot_click",  # Equiv, to click=clickOpts(id="plot_click")
hover = hoverOpts(id = "plot_hover", delayType = "throttle"),
brush = brushOpts(id = "plot_brush")
),
h4("Clicked points"),
tableOutput("plot_clickedpoints"),
h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White",
"Percent Black",
"Percent Hispanic",
"Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(
textOutput("selected_var")
)
server <- function(input, output) {
output$selected_var <- renderText({
"You have selected this"
})
}
shinyApp(ui,server)
source('~/code/project/shiny_ode.R', echo=TRUE)
install.packages("deSolve")
source('~/code/project/shiny_ode.R', echo=TRUE)
runApp('project/shiny_ode.R')
